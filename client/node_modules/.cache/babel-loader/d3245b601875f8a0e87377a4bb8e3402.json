{"ast":null,"code":"import * as api from \"../api\";\nimport { CREATE, DELETE, FETCH_ALL, FETCH_BY_SEARCH, LIKE, STOP_LOADING, START_LOADING, FETCH_POST, UPDATE } from \"./../constants/actionTypes\"; // Action Creators\n// Functions that return actions\n\nexport const getPost = id => async dispatch => {\n  // Fetch Data\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"get post\", error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  // Fetch Data\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"get posts\", error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: STOP_LOADING\n    });\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  // Create Post\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: STOP_LOADING\n    });\n    history.push(`/posts/${data._id}`);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/abdul/lighthouse/snapshot/client/src/actions/posts.js"],"names":["api","CREATE","DELETE","FETCH_ALL","FETCH_BY_SEARCH","LIKE","STOP_LOADING","START_LOADING","FETCH_POST","UPDATE","getPost","id","dispatch","type","data","fetchPost","payload","error","console","log","getPosts","page","fetchPosts","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","history","push","_id","updatePost","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from \"../api\";\nimport {\n  CREATE,\n  DELETE,\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  LIKE,\n  STOP_LOADING,\n  START_LOADING,\n  FETCH_POST,\n  UPDATE,\n} from \"./../constants/actionTypes\";\n\n// Action Creators\n// Functions that return actions\nexport const getPost = (id) => async (dispatch) => {\n  // Fetch Data\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPost(id);\n    dispatch({ type: STOP_LOADING });\n\n    dispatch({ type: FETCH_POST, payload: data });\n  } catch (error) {\n    console.log(\"get post\", error);\n  }\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n  // Fetch Data\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchPosts(page);\n    dispatch({ type: STOP_LOADING });\n\n    dispatch({ type: FETCH_ALL, payload: data });\n  } catch (error) {\n    console.log(\"get posts\", error);\n  }\n};\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n\n    const {\n      data: { data },\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({ type: STOP_LOADING });\n\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n  // Create Post\n  try {\n    dispatch({ type: START_LOADING });\n\n    const { data } = await api.createPost(post);\n    dispatch({ type: STOP_LOADING });\n    history.push(`/posts/${data._id}`);\n\n    dispatch({ type: CREATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}