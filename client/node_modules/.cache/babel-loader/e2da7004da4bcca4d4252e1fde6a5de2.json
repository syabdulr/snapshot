{"ast":null,"code":"import { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE, FETCH_BY_SEARCH, FETCH_POST, STOP_LOADING, START_LOADING } from \"./../constants/actionTypes\";\n\nconst posts = (state = {\n  isLoading: true,\n  posts: []\n}, action) => {\n  // Logic\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case STOP_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        totalPages: action.payload.totalPages\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n      // If ids are same return it's data\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      // Keep all posts except payload\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    case LIKE:\n      // If ids are same return it's data\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default posts;","map":{"version":3,"sources":["/Users/abdul/lighthouse/MERN-Memories-App/client/src/reducers/posts.js"],"names":["CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","FETCH_BY_SEARCH","FETCH_POST","STOP_LOADING","START_LOADING","posts","state","isLoading","action","type","payload","data","currentPage","totalPages","post","map","_id","filter"],"mappings":"AAAA,SACEA,MADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,MALF,EAMEC,eANF,EAOEC,UAPF,EAQEC,YARF,EASEC,aATF,QAUO,4BAVP;;AAYA,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,IAAb;AAAmBF,EAAAA,KAAK,EAAE;AAA1B,CAAT,EAAyCG,MAAzC,KAAoD;AAChE;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,aAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF,SAAKJ,YAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF,SAAKT,SAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELD,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,UAAU,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJtB,OAAP;;AAOF,SAAKX,UAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELQ,QAAAA,IAAI,EAAEN,MAAM,CAACE;AAFR,OAAP;;AAKF,SAAKT,eAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELD,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKd,MAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYD,QAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAV,EAAiBG,MAAM,CAACE,OAAxB;AAAnB,OAAP;;AAEF,SAAKV,MAAL;AACE;AACA,aAAO,EACL,GAAGM,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYU,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD9C;AAFF,OAAP;;AAOF,SAAKjB,MAAL;AACE;AACA,aAAO,EACL,GAAGS,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYY,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAFF,OAAP;;AAKF,SAAKX,IAAL;AACE;AACA,aAAO,EACL,GAAGO,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYU,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD9C;AAFF,OAAP;;AAOF;AACE,aAAOR,KAAP;AAxDJ;AA0DD,CA5DD;;AA8DA,eAAeD,KAAf","sourcesContent":["import {\n  CREATE,\n  DELETE,\n  FETCH_ALL,\n  LIKE,\n  UPDATE,\n  FETCH_BY_SEARCH,\n  FETCH_POST,\n  STOP_LOADING,\n  START_LOADING,\n} from \"./../constants/actionTypes\";\n\nconst posts = (state = { isLoading: true, posts: [] }, action) => {\n  // Logic\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n\n    case STOP_LOADING:\n      return { ...state, isLoading: false };\n\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        totalPages: action.payload.totalPages,\n      };\n\n    case FETCH_POST:\n      return {\n        ...state,\n        post: action.payload,\n      };\n\n    case FETCH_BY_SEARCH:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case CREATE:\n      return { ...state, posts: [...state.posts, action.payload] };\n\n    case UPDATE:\n      // If ids are same return it's data\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n\n    case DELETE:\n      // Keep all posts except payload\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      };\n\n    case LIKE:\n      // If ids are same return it's data\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n"]},"metadata":{},"sourceType":"module"}