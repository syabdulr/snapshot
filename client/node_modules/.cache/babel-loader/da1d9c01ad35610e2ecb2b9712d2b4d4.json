{"ast":null,"code":"var _jsxFileName = \"/Users/abdul/lighthouse/snapshot/Snapshot-App/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Redux\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, updatePost } from \"../../actions/posts\"; // Image to String\n\nimport FileBase from \"react-file-base64\"; // Material-UI\n\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\"; // React Router\n\nimport { useHistory } from \"react-router-dom\"; // Styles\n\nimport useStyles from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form({\n  currentId,\n  setCurrentId\n}) {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  }); // Styles\n\n  const classes = useStyles(); // Redux\n\n  const dispatch = useDispatch();\n  const post = useSelector(state => currentId ? state.posts.posts.find(postToFind => postToFind._id === currentId) : null); // const post = useSelector((state) => state.posts.posts);\n\n  const history = useHistory(); // UseEffect\n\n  useEffect(() => {\n    if (post) {\n      setPostData(post);\n    }\n  }, [post]);\n  const user = JSON.parse(localStorage.getItem(\"profile\")); // Handlers\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\"\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); // If we are updating\n\n    if (currentId) {\n      var _user$result;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n    } else {\n      var _user$result2;\n\n      // If we are creating\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }, history));\n    }\n\n    clear();\n  }; // Get current id of the post\n  // If no logged in user\n\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Please Sign In to create your own memories, and like other's memories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  } // Return\n\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    elevation: 6,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: ` ${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\" \", currentId ? \"Editing\" : \"Creating\", \" a Memory\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(\",\")\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInputs,\n        style: {\n          margin: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"RfIj5D5jVblvW/Vm3Q9MpMsxosU=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useHistory];\n});\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/abdul/lighthouse/snapshot/Snapshot-App/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useDispatch","useSelector","createPost","updatePost","FileBase","TextField","Button","Typography","Paper","useHistory","useStyles","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","classes","dispatch","post","state","posts","find","postToFind","_id","history","user","JSON","parse","localStorage","getItem","clear","handleSubmit","e","preventDefault","name","result","paper","root","form","target","value","split","fileInputs","margin","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// Redux\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, updatePost } from \"../../actions/posts\";\n\n// Image to String\nimport FileBase from \"react-file-base64\";\n\n// Material-UI\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n\n// React Router\nimport { useHistory } from \"react-router-dom\";\n\n// Styles\nimport useStyles from \"./styles\";\n\nexport default function Form({ currentId, setCurrentId }) {\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n\n  // Styles\n  const classes = useStyles();\n\n  // Redux\n  const dispatch = useDispatch();\n  const post = useSelector((state) =>\n    currentId\n      ? state.posts.posts.find((postToFind) => postToFind._id === currentId)\n      : null\n  );\n\n  // const post = useSelector((state) => state.posts.posts);\n\n  const history = useHistory();\n\n  // UseEffect\n  useEffect(() => {\n    if (post) {\n      setPostData(post);\n    }\n  }, [post]);\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  // Handlers\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // If we are updating\n    if (currentId) {\n      dispatch(\n        updatePost(currentId, { ...postData, name: user?.result?.name })\n      );\n    } else {\n      // If we are creating\n      dispatch(createPost({ ...postData, name: user?.result?.name }, history));\n    }\n\n    clear();\n  };\n\n  // Get current id of the post\n\n  // If no logged in user\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper}>\n        <Typography variant=\"h6\" align=\"center\">\n          Please Sign In to create your own memories, and like other's memories.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  // Return\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={` ${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">\n          {\" \"}\n          {currentId ? \"Editing\" : \"Creating\"} a Memory\n        </Typography>\n\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value.split(\",\") })\n          }\n        />\n        <div className={classes.fileInputs} style={{ margin: \"1rem\" }}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}